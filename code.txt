CONTROLLER:



package sample;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javafx.animation.AnimationTimer;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.layout.GridPane;
import javafx.scene.shape.Rectangle;

public class Controller {

    //various FXML features, such as a gridpane, a listview, labels, a pie chart, buttons, a line chart, rectangles, and number axes.
    @FXML
    GridPane gPane;

    @FXML
    ListView<String> lstEvents;

    @FXML
    Label lblHospitalStatus, lblQuarantineStatus, lblKey, lbl1, lbl2, lbl3, lbl4, lbl5, lbl6, lbl7, lbl8, lbl9, lbl10, lbl11, lbl12, lbl13, lbl14, lbl15, lbl16, lbl17, lbl18, lblInfectionRate;

    @FXML
    PieChart pieChart;

    @FXML
    Button btnStart, btnMoreSpeed, btnLessSpeed, btnVirus, btnQuarantine, btnHospital, btnMutate, btnVaccine;

    @FXML
    LineChart lineChart;

    @FXML
    Rectangle rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18;

    @FXML
    NumberAxis xAxis;
    @FXML
    NumberAxis yAxis;

    //XY Chart Series', used for the line chart.
    XYChart.Series seriesHealthy = new XYChart.Series();
    XYChart.Series seriesInfected = new XYChart.Series();

    boolean vaccineDistribution;
    boolean virusExists = false;
    int infectionRate = 60;
    boolean hospitalOpen = false;
    boolean quarantine;
    int peopleHealthyNum = 0;
    int peopleInfectedNum = 0;
    int row = 30;
    int col = 75;
    int chartCounter = 0;
    int speed = 1000000000;
    int years = 0;
    Button[][] btn = new Button[row][col];
    int[][] spotsTaken = new int[row][col];
    ArrayList<Person> people = new ArrayList<>();
    ArrayList<Person> peopleInfectedTempInfo = new ArrayList<>();
    ArrayList<Virus> peopleInfected = new ArrayList<>();
    ArrayList<Vaccine> vaccines = new ArrayList<>();
    //initializes by hiding everything except for start button, and disabling vaccine button.
    @FXML
    public void initialize() {
        btnVaccine.setDisable(true);
        setFXMLFeatures(false);
    }
    //handles start function, by initializing the pictures/people, the gird pane, buttons and FXML features, and running the start method.
    @FXML
    private void handleStart() {
        setPictures();
        gPane.setGridLinesVisible(true);
        gPane.setVisible(true);
        start();
        btnStart.setDisable(true);
        setFXMLFeatures(true);
    }
    //sets various FXML features to false/true based on parameter.
    public void setFXMLFeatures(boolean a){
        for (Button button : Arrays.asList(btnMoreSpeed, btnLessSpeed, btnVirus, btnQuarantine, btnHospital, btnMutate, btnVaccine)) {
            button.setVisible(a);
        }
        for (Label label : Arrays.asList(lblKey, lbl1, lbl2, lbl3, lbl4, lbl5, lbl6, lbl7, lbl8, lbl9, lbl10, lbl11, lbl12, lbl13, lbl14, lbl15, lbl16, lbl17, lbl18)) {
            label.setVisible(a);
        }
        for (Rectangle rectangle : Arrays.asList(rt1, rt2, rt3, rt4, rt5, rt6, rt7, rt8, rt9, rt10, rt11, rt12, rt13, rt14, rt15, rt16, rt17, rt18)) {
            rectangle.setVisible(a);
        }
        pieChart.setVisible(a);
        lineChart.setVisible(a);
        lstEvents.setVisible(a);
    }
    //sets the "pictures," or spots on the grid (the hospital, people, etc.).
    public void setPictures() {
        //loop to initialize 100 people.
        int a = 0;
        while (a < 100) {
            int randRow = (int) (Math.random() * (30));
            int randCol = (int) (Math.random() * (75));
            if (!((randRow >= 10 && randRow <= 19) && (randCol >= 30 && randCol <= 44)) && !((randRow >= 27 && randRow <= 29) && (randCol >= 36 && randCol <= 38))) {
                people.add(new Person(randRow, randCol));
                spotsTaken[randRow][randCol] = 1;
                a++;
            }
        }
        //loop to initialize buttons and add it to the gridpane.
        for (int i = 0; i < btn.length; i++) {
            for (int j = 0; j < btn[0].length; j++) {
                btn[i][j] = new Button();
                btn[i][j].setPrefSize(25, 25);
                gPane.add(btn[i][j], j, i);
            }
        }
        //loop to initialize hospital area.
        for (int v = 10; v < 20; v++) {
            for (int n = 30; n < 45; n++) {
                btn[v][n].setStyle("-fx-background-color:#757575");
                spotsTaken[v][n] = 2;
            }
        }
        //loop to initialize vaccine distribution center.
        for (int v = 27; v < 30; v++) {
            for (int n = 36; n < 39; n++) {
                btn[v][n].setStyle("-fx-background-color:#000cff");
                spotsTaken[v][n] = 4;
            }
        }
        //runs updateScreen which updates colors of squares.
        updateScreen();
    }
    //updates colors of squares on grid based on what it is representing.
    @FXML
    private void updateScreen() {
        //loop that runs through all buttons in the grid.
        for (int i = 0; i < btn.length; i++) {
            for (int j = 0; j < btn[0].length; j++) {
                //sets different colors based on spotsTaken 2d array (if no one is in the spot, set to white, if it is a hospital, set it to gray, etc.).
                if (spotsTaken[i][j] == 0) {
                    btn[i][j].setStyle("-fx-background-color:#ffffff");
                } else if (spotsTaken[i][j] == 2) {
                    btn[i][j].setStyle("-fx-background-color:#757575");
                } else if (spotsTaken[i][j] == 3) {
                    btn[i][j].setStyle("-fx-background-color:#ff0000");
                } else if (spotsTaken[i][j] == 4) {
                    btn[i][j].setStyle("-fx-background-color:#000cff");
                } else if (spotsTaken[i][j] == 5) {
                    btn[i][j].setStyle("-fx-background-color:#00ff2f");
                } else if (spotsTaken[i][j] == 1) {
                    //loop that runs through people arraylist.
                    for (int k = 0; k < people.size(); k++) {
                        if (k == 0) {
                            //loop to set red squares based on infected people locations.
                            for (Virus m : peopleInfected) {
                                if ((m.getRow() == i) && (m.getCol() == j)) {
                                    btn[i][j].setStyle("-fx-background-color:#ff0000");
                                }
                            }
                        }
                        //set of if statements which sets the colors of the squares based on the person's age and gender.
                        if ((people.get(k).getRow() == i) && (people.get(k).getCol() == j)) {
                            if (people.get(k).getAge() >= 0 && people.get(k).getAge() <= 12) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#6ab5fc");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#ffa6e9");
                                }
                            } else if (people.get(k).getAge() >= 13 && people.get(k).getAge() <= 21) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#e49974");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#ff7f7f");
                                }
                            } else if (people.get(k).getAge() >= 22 && people.get(k).getAge() <= 30) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#00a2bb");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#720707");
                                }
                            } else if (people.get(k).getAge() >= 31 && people.get(k).getAge() <= 45) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#c4ff15");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#95029d");
                                }
                            } else if (people.get(k).getAge() >= 46 && people.get(k).getAge() <= 60) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#c9beff");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#27079e");
                                }
                            } else if (people.get(k).getAge() >= 61 && people.get(k).getAge() <= 75) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#e543ff");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#0a6b01");
                                }
                            } else if (people.get(k).getAge() >= 76) {
                                if (people.get(k).getGender().equals("male")) {
                                    btn[i][j].setStyle("-fx-background-color:#f2ff00");
                                } else {
                                    btn[i][j].setStyle("-fx-background-color:#97ffed");
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    //start function to run actual animation.
    public void start() {
        //animation timer
        new AnimationTimer() {
            @Override
            public void handle(long now) {
                //loop to run the animation through all the people in people arraylist
                for (int i = 0; i < people.size(); i++) {
                    //sets an arraylist to get the neighbors of the person.
                    ArrayList<Integer> allNeighbors = people.get(i).checkNeighbor(people);
                    //runs every 'speed' seconds, which can be changed while run.
                    if (now - people.get(i).getStartTime() > (speed)) {
                        //enables/disables hospital button based on infected people count.
                        if (peopleInfected.size() > 0 && hospitalOpen) {
                            btnHospital.setDisable(true);
                        } else if (peopleInfected.size() == 0 && hospitalOpen) {
                            btnHospital.setDisable(false);
                        }
                        //displays infection rate.
                        lblInfectionRate.setText("Infection Rate: " + infectionRate);
                        //increases age of people by 1.
                        people.get(i).setAge(people.get(i).getAge() + 1);
                        //runs change location function for every person, only if they are not quarantining.
                        if (!people.get(i).getQuarantine()) {
                            people.get(i).changeLocation(spotsTaken);
                        }
                        //various if statements to lower the reproduction cooldown and set the reproduction rate based on the person's age and gender.
                        if (people.get(i).getAge() >= 14) {
                            if (people.get(i).getReproductionCooldown() != 0) {
                                people.get(i).setReproductionCooldown(people.get(i).getReproductionCooldown() - 1);
                            }
                            if (people.get(i).getAge() <= 30) {
                                people.get(i).setReproductionRate(70);
                            }
                            if (people.get(i).getAge() <= 40 && people.get(i).getAge() > 30) {
                                people.get(i).setReproductionRate(50);
                            }
                            if (people.get(i).getAge() <= 50 && people.get(i).getAge() > 40) {
                                people.get(i).setReproductionRate(30);
                            }
                            if (people.get(i).getAge() > 50) {
                                if (people.get(i).getGender().equals("male")) {
                                    people.get(i).setReproductionRate(20);
                                } else {
                                    people.get(i).setReproductionRate(0);
                                }
                            }
                        }
                        //if the virus exists,
                        if (virusExists) {
                            if (i == 0) {
                                //infects healthy people based on locations of infected people.
                                infectPeople();
                                //runs loop through infected people and changes their locations.
                                for (int d = 0; d < peopleInfected.size(); d++) {
                                    peopleInfected.get(d).changeLocation(spotsTaken, hospitalOpen, peopleInfected, people, peopleInfectedTempInfo, lstEvents);
                                }
                            }
                            //running 3 times,
                            if (i < 3) {
                                //if vaccines are being distributed,
                                if (vaccineDistribution) {
                                    //runs loop through all vaccine distributors and changes their locations.
                                    for (Vaccine vaccine : vaccines) {
                                        vaccine.changeLocation(spotsTaken, people, lstEvents);
                                    }
                                }
                            }
                        }
                        //various if statements to set a person's death rate based on their age.
                        if (people.get(i).getAge() >= 50 && people.get(i).getAge() < 60) {
                            people.get(i).setDeathRate(1);
                        }
                        if (people.get(i).getAge() >= 60 && people.get(i).getAge() < 70) {
                            people.get(i).setDeathRate(3.5);
                        }
                        if (people.get(i).getAge() >= 60 && people.get(i).getAge() < 70) {
                            people.get(i).setDeathRate(8.5);
                        }
                        if (people.get(i).getAge() >= 70) {
                            people.get(i).setDeathRate(25);
                        }
                        //resets the timer.
                        people.get(i).resetStartTime();
                        //loop that runs if the person 14 years or older.
                        if (people.get(i).getAge() >= 14) {
                            //if there are people/neighbors next to the person.
                            if (allNeighbors.size() > 0) {
                                //senses one of the neighbors.
                                int neighbor1 = allNeighbors.get(0);
                                //attempts to reproduce with the neighbor if the conditions are met.
                                if (!(people.get(i).getGender().equals(people.get(neighbor1).getGender())) && people.get(neighbor1).getAge() >= 14) {
                                    reproduce(people.get(i), people.get(neighbor1));
                                }
                            }
                        }
                        //runs death method.
                        death(i);
                        //runs one time, and updates numbers of people who are healthy and people who are vaccinated (for the line chart), and runs the handle chart method.
                        if (i == 0) {
                            peopleHealthyNum = people.size();
                            peopleInfectedNum = peopleInfected.size();
                            handleChart();
                        }
                    }
                }
                //updates the squares.
                updateScreen();
            }
        }.start();
    }
    //reproduce method.
    public void reproduce(Person person1, Person person2) {
        //variables for baby positions and reproduction rates.
        int babyRow;
        int babyCol;
        double totalReproductionRate = person1.getReproductionRate() + person2.getReproductionRate();
        double randomReproductionRate = (Math.random() * (201));
        //if various conditions are met for reproduction,
        if ((randomReproductionRate < totalReproductionRate) && person1.getReproductionCooldown() == 0 && person2.getReproductionCooldown() == 0 && person1.getReproductionRate() != 0 && person2.getReproductionRate() != 0) {
            //sets baby row to certain values if the people reproducing are near the edge.
            if (person1.getRow() == 0 || person2.getRow() == 0) {
                babyRow = 1;
            } else if (person1.getRow() == 29 || person2.getRow() == 29) {
                babyRow = 28;
            } else {
                //if parents are not near the edge, it sets the baby row to a random spot near them.
                if (Math.random() > .5) {
                    babyRow = person1.getRow() + 1;
                } else {
                    babyRow = person1.getRow() - 1;
                }
            }
            //sets baby column to certain values if the people reproducing are near the edge.
            if (person1.getCol() == 0 || person2.getCol() == 0) {
                babyCol = 1;
            } else if (person1.getCol() == 74 || person2.getCol() == 74) {
                babyCol = 73;
            } else {
                //if parents are not near the edge, it sets the baby column to a random spot near them.
                if (Math.random() > .5) {
                    babyCol = person1.getCol() + 1;
                } else {
                    babyCol = person1.getCol() - 1;
                }
            }
            //if the spot is empty,
            if (spotsTaken[babyRow][babyCol] == 0) {
                //baby added to people arraylist.
                people.add(new Person(babyRow, babyCol));
                //sets baby quarantine to true if quarantine is in place.
                if (quarantine) {
                    people.get(people.size() - 1).setQuarantine(true);
                }
                //adds birth event to listview, sets the spots taken to 1 since the baby is there, sets parents' reproduction cooldown to 3.
                lstEvents.getItems().add(0, "A person has been born.");
                spotsTaken[babyRow][babyCol] = 1;
                person1.setReproductionCooldown(3);
                person2.setReproductionCooldown(3);
            }
        }
    }
    //death method which controls dying of people.
    public void death(int i) {
        //random death double.
        double randDeathNum = (Math.random() * (101));
        //if various conditions are met to make person die,
        if (randDeathNum < people.get(i).getDeathRate()) {
            //sets the spots taken to 0 since no one is there anymore.
            spotsTaken[people.get(i).getRow()][people.get(i).getCol()] = 0;
            //adds death event to listview.
            lstEvents.getItems().add(0, "A person has died (natural).");
            //removes person from people arraylist.
            people.remove(i);
        }
    }
    //handles virus button clicked.
    @FXML
    private void handleVirus() {
        //sets virus exists boolean to true.
        virusExists = true;
        //infects random person in people arraylist, adds person to peopleInfected arraylist, adds person's temporary info to peopleInfectedTempInfo arraylist, removes person from people arraylist.
        int random = (int) (Math.random() * ((people.size() - 1) + 1));
        peopleInfected.add(new Virus(people.get(random).getRow(), people.get(random).getCol(), peopleInfectedTempInfo.size(), people.get(random).getAge(), people.get(random).getGender()));
        peopleInfectedTempInfo.add(people.get(random));
        people.remove(people.get(random));
        //enables vaccine button.
        btnVaccine.setDisable(false);
        //adds infected event to listview.
        lstEvents.getItems().add(0, "A person has been infected.");
    }
    //infects people.
    public void infectPeople() {
        //creates arraylist to manage infected people.
        ArrayList<Integer> peopleToRemove = new ArrayList<>();
        ArrayList<Integer> neighborsOfInfectedPeople = new ArrayList<>();
        //runs through infected people arraylist.
        for (Virus virus : peopleInfected) {
            //sets temp arraylist to the infected person's neighbors.
            ArrayList<Integer> temp = virus.checkNeighbor(people);
            //runs through all the infected person's neighbors.
            for (Integer integer : temp) {
                //if arraylist doesn't contain neighbor, and the infected person isn't in the hospital, adds neighbor to neighbors of infected people arraylist.
                if (!neighborsOfInfectedPeople.contains(integer) && !virus.getInHospital()) {
                    neighborsOfInfectedPeople.add(integer);
                }
            }
        }
        //runs through all neighbors in neighbors of infected person array list.
        for (Integer neighborsOfInfectedPerson : neighborsOfInfectedPeople) {
            //sets a random infection rate.
            double randomInfectionRate = (Math.random() * (101));
            //decreases chances of neighbor getting infected if they are quarantining and/or are vaccinated.
            if (people.get(neighborsOfInfectedPerson).getQuarantine()) {
                randomInfectionRate += 20;
            }
            if (people.get(neighborsOfInfectedPerson).getVaccinated()) {
                randomInfectionRate += 50;
            }
            //if the condition is met,
            if ((randomInfectionRate < infectionRate)) {
                //adds infected event to listview.
                lstEvents.getItems().add("A person has been infected.");
                //infects neighbor, adds person to peopleInfected arraylist, adds person's temporary info to peopleInfectedTempInfo arraylist, adds person to people to remove arraylist.
                peopleInfected.add(new Virus(people.get(neighborsOfInfectedPerson).getRow(), people.get(neighborsOfInfectedPerson).getCol(), peopleInfectedTempInfo.size(), people.get(neighborsOfInfectedPerson).getAge(), people.get(neighborsOfInfectedPerson).getGender()));
                peopleInfectedTempInfo.add(people.get(neighborsOfInfectedPerson));
                peopleToRemove.add(neighborsOfInfectedPerson);
            }
        }
        //sorts out people to remove arraylist in greatest to least order.
        Collections.sort(peopleToRemove);
        Collections.reverse(peopleToRemove);
        //removes people in people to remove arraylist from people arraylist.
        for (Integer integer : peopleToRemove) {
            people.remove(people.get(integer));
        }
    }
    //handles increase speed button click by increasing speed by dividing speed integer by 2.
    @FXML
    private void increaseSpeed() {
        speed /= 2;
    }
    //handles decrease speed button click by decreasing speed by multiplying speed integer by 2.
    @FXML
    private void decreaseSpeed() {
        speed *= 2;
    }
    //handles quarantine button click.
    @FXML
    private void handleQuarantine() {
        //if quarantine is on, it turns it off, displays it, and sets quarantine attribute to false for all people.
        if (quarantine) {
            lblQuarantineStatus.setText("Quarantine period off.");
            quarantine = false;
            for (Person b : people) {
                b.setQuarantine(false);
            }
        } else {
            //if quarantine is off, it turns it on, displays it, and sets quarantine attribute to true for most people.
            lblQuarantineStatus.setText("Quarantine period on.");
            quarantine = true;
            for (Person b : people) {
                if (Math.random() < .85) {
                    b.setQuarantine(true);
                }
            }
        }
    }
    //handles hospital button click.
    @FXML
    private void handleHospital() {
        //sets hospital to open if closed, and closed if open.
        hospitalOpen = !hospitalOpen;
        //displays status of whether hospital is closed or open.
        if (hospitalOpen) {
            lblHospitalStatus.setText("Hospital is open.");
        } else {
            lblHospitalStatus.setText("Hospital is closed.");
        }
    }
    //handles mutate button click by increasing virus infection rate by 10.
    @FXML
    private void handleMutate() {
        infectionRate += 10;
    }
    //handles vaccine button click.
    @FXML
    private void handleVaccine() {
        //if virus exists,
        if (virusExists) {
            //sets vaccine distribution boolean to true.
            vaccineDistribution = true;
            //loop that runs through vaccine distribution center spots, adds new vaccine distributors in those spots, sets those spots in spots taken array to 5.
            for (int i = 27; i < 30; i++) {
                for (int j = 36; j < 39; j++) {
                    vaccines.add(new Vaccine(i, j));
                    spotsTaken[i][j] = 5;
                }
            }
        }
    }
    //handles pie and line chart.
    @FXML
    private void handleChart() {
        //various variables for gender and age.
        int male1 = 0;
        int male2 = 0;
        int male3 = 0;
        int male4 = 0;
        int male5 = 0;
        int male6 = 0;
        int male7 = 0;
        int female1 = 0;
        int female2 = 0;
        int female3 = 0;
        int female4 = 0;
        int female5 = 0;
        int female6 = 0;
        int female7 = 0;
        //loop running through people array list, adding to each integer listed above based on the person's age and gender.
        for (Person a : people) {
            if (a.getGender().equals("male")) {
                if (a.getAge() <= 12) {
                    male1++;
                } else if (a.getAge() <= 21) {
                    male2++;
                } else if (a.getAge() <= 30) {
                    male3++;
                } else if (a.getAge() <= 45) {
                    male4++;
                } else if (a.getAge() <= 60) {
                    male5++;
                } else if (a.getAge() <= 75) {
                    male6++;
                } else {
                    male7++;
                }
            } else {
                if (a.getAge() <= 12) {
                    female1++;
                } else if (a.getAge() <= 21) {
                    female2++;
                } else if (a.getAge() <= 30) {
                    female3++;
                } else if (a.getAge() <= 45) {
                    female4++;
                } else if (a.getAge() <= 60) {
                    female5++;
                } else if (a.getAge() <= 75) {
                    female6++;
                } else {
                    female7++;
                }
            }
        }
        //loop running through infected people array list, adding to each integer listed above based on the person's age and gender.
        for (Virus b : peopleInfected) {
            if (b.getGender().equals("male")) {
                if (b.getGender().equals("male")) {
                    if (b.getAge() <= 12) {
                        male1++;
                    } else if (b.getAge() <= 21) {
                        male2++;
                    } else if (b.getAge() <= 30) {
                        male3++;
                    } else if (b.getAge() <= 45) {
                        male4++;
                    } else if (b.getAge() <= 60) {
                        male5++;
                    } else if (b.getAge() <= 75) {
                        male6++;
                    } else {
                        male7++;
                    }
                } else {
                    if (b.getAge() <= 12) {
                        female1++;
                    } else if (b.getAge() <= 21) {
                        female2++;
                    } else if (b.getAge() <= 30) {
                        female3++;
                    } else if (b.getAge() <= 45) {
                        female4++;
                    } else if (b.getAge() <= 60) {
                        female5++;
                    } else if (b.getAge() <= 75) {
                        female6++;
                    } else {
                        female7++;
                    }
                }
            }
        }
        //adds ages and gender groups of people to pie chart.
        ObservableList<PieChart.Data> list = FXCollections.observableArrayList(
                new PieChart.Data("Male ages 0-12", male1),
                new PieChart.Data("Male ages 13-21", male2),
                new PieChart.Data("Male ages 22-30", male3),
                new PieChart.Data("Male ages 31-45", male4),
                new PieChart.Data("Male ages 46-60", male5),
                new PieChart.Data("Male ages 61-75", male6),
                new PieChart.Data("Female ages 76+", male7),
                new PieChart.Data("Female ages 0-12", female1),
                new PieChart.Data("Female ages 13-21", female2),
                new PieChart.Data("Female ages 22-30", female3),
                new PieChart.Data("Female ages 31-45", female4),
                new PieChart.Data("Female ages 46-60", female5),
                new PieChart.Data("Female ages 61-75", female6),
                new PieChart.Data("Female ages 76+", female7)
        );
        //sets pie chart to data above.
        pieChart.setData(list);
        //clears current data in line chart.
        lineChart.getData().clear();
        //sets upper bound for x axis to constantly increasing variable chartCounter.
        xAxis.setUpperBound(chartCounter);
        //adds updated population numbers to both series.
        seriesHealthy.getData().add(new XYChart.Data(chartCounter, peopleHealthyNum));
        seriesInfected.getData().add(new XYChart.Data(chartCounter, peopleInfectedNum));
        //sets name for both series based on what they represent.
        seriesHealthy.setName("Healthy People");
        seriesInfected.setName("Infected People");
        //increases chartCounter integer by 1.
        chartCounter++;
        //adds both series to line chart.
        lineChart.getData().add(seriesHealthy);
        lineChart.getData().add(seriesInfected);
    }
}



PERSON:



package sample;

import java.util.ArrayList;

public class Person {
    //various variables for attributes of the person, such as row, column, age, death rate, etc.
    private int row;
    private int col;
    private long startTime;
    private int age = 0;
    private int reproductionRate = 0;
    private int reproductionCooldown = 0;
    private double deathRate = 0.1;
    private final String gender;
    private boolean vaccinated = false;
    private boolean quarantine = false;
    //constructor to initialize and create a person.
    public Person(int r, int c) {
        //sets row and column to r and c parameters.
        this.row = r;
        this.col = c;
        //sets start time to system nano time.
        this.startTime = System.nanoTime();
        //sets random gender.
        if (Math.random() > .5) {
            this.gender = "male";
        } else {
            this.gender = "female";
        }
    }
    //changes location of person.
    public void changeLocation(int[][] spotsTaken) {
        //timeout and check variables.
        int timeout = 0;
        boolean check = false;
        //loop running while check is false and while timeout is less than 1000.
        while (!check && timeout < 1000) {
            //temp row and column variables
            int tempRow = row;
            int tempCol = col;
            //changes temp row and column to respective positions if person is next to hospital or vaccine distribution center.
            if (tempRow == 9 && tempCol >= 30 && tempCol <= 44) {
                tempRow--;
            } else if (tempRow == 20 && tempCol >= 30 && tempCol <= 44) {
                tempRow++;
            } else if (tempCol == 29 && tempRow >= 10 && tempRow <= 19) {
                tempCol--;
            } else if (tempCol == 45 && tempRow >= 10 && tempRow <= 19) {
                tempCol++;
            } else if (tempRow == 26 && tempCol >= 36 && tempCol <= 38) {
                tempRow--;
            } else if (tempCol == 35 && tempRow >= 27 && tempRow <= 29) {
                tempCol--;
            } else if (tempCol == 39 && tempRow >= 27 && tempRow <= 29) {
                tempCol++;
            } else {
                //changes temp row to respective position if person is on edge of grid.
                if (tempRow == 29) {
                    tempRow--;
                } else if (tempRow == 0) {
                    tempRow++;
                } else {
                    //randomly increases or decreases person's row (slightly adjusted to bring player towards middle).
                    if (row < 15) {
                        if (Math.random() > .45) {
                            tempRow++;
                        } else {
                            tempRow--;
                        }
                    } else {
                        if (Math.random() > .55) {
                            tempRow++;
                        } else {
                            tempRow--;
                        }
                    }
                }
                //changes temp column to respective position if person is on edge of grid.
                if (tempCol == 74) {
                    tempCol--;
                } else if (tempCol == 0) {
                    tempCol++;
                } else {
                    //randomly increases or decreases person's column (slightly adjusted to bring player towards middle).
                    if (col < 32) {
                        if (Math.random() > .45) {
                            tempCol++;
                        } else {
                            tempCol--;
                        }
                    } else {
                        if (Math.random() > .55) {
                            tempCol++;
                        } else {
                            tempCol--;
                        }
                    }
                }
            }
            //if the spot at tempRow and tempCol has no one in it,
            if (spotsTaken[tempRow][tempCol] == 0) {
                //sets check to true to stop loop.
                check = true;
                //sets spot in spots taken to 1 since the person is there now.
                spotsTaken[tempRow][tempCol] = 1;
                //sets old position to 0 in spots taken since no one is there now.
                spotsTaken[row][col] = 0;
                //updates row and column to match tempRow and tempCol.
                row = tempRow;
                col = tempCol;
            }
            //increases timeout by 1 (used to prevent infinite looping and freezing of program).
            timeout++;
        }
    }
    //checks neighbors of person.
    public ArrayList<Integer> checkNeighbor(ArrayList<Person> tempPeople) {
        //arraylist for neighbors.
        ArrayList<Integer> neighbors = new ArrayList<>();
        //runs through all people in tempPeople.
        for (int i = 0; i < tempPeople.size(); i++) {
            //if person in tempPeople is next to person,
            if (tempPeople.get(i).getRow() >= row - 1 && tempPeople.get(i).getRow() <= row + 1 && tempPeople.get(i).getCol() >= col - 1 && tempPeople.get(i).getCol() <= col + 1) {
                //adds the person in tempPeople to neighbors arraylist.
                neighbors.add(i);
            }
        }
        //returns neighbors arraylist.
        return neighbors;
    }
    //various accessors and mutators to change and access attributes of people in person class.
    public void resetStartTime() {
        startTime = System.nanoTime();
    }

    public long getStartTime() {
        return startTime;
    }

    public void setRow(int i) {
        this.row = i;
    }

    public int getRow() {
        return this.row;
    }

    public void setCol(int i) {
        this.col = i;
    }

    public int getCol() {
        return this.col;
    }

    public void setAge(int i) {
        this.age = i;
    }

    public int getAge() {
        return this.age;
    }

    public void setReproductionRate(int i) {
        this.reproductionRate = i;
    }

    public int getReproductionRate() {
        return this.reproductionRate;
    }

    public void setReproductionCooldown(int i) {
        this.reproductionCooldown = i;
    }

    public int getReproductionCooldown() {
        return this.reproductionCooldown;
    }

    public void setDeathRate(double i) {
        this.deathRate = i;
    }

    public double getDeathRate() {
        return this.deathRate;
    }

    public String getGender() {
        return this.gender;
    }

    public void setVaccinated(boolean i) {
        this.vaccinated = i;
    }

    public boolean getVaccinated() {
        return this.vaccinated;
    }

    public void setQuarantine(boolean i) {
        this.quarantine = i;
    }

    public boolean getQuarantine() {
        return this.quarantine;
    }
}





VIRUS:



package sample;

import java.util.ArrayList;

import javafx.scene.control.ListView;

public class Virus {
    //various variables for attributes of the infected person, such as row, column, age, in hospital, etc.
    private int row;
    private int col;
    private boolean inHospital = false;
    private final int spotInPeopleTempInfo;
    private boolean outsideHospital = false;
    private int age;
    private boolean cured = false;
    private boolean death = false;
    private int inHospitalTime;
    private String gender;
    //constructor to initialize and create an infected person.
    public Virus(int r, int c, int spot, int age, String gender) {
        //sets row, column, spotInPeopleTempInfo, age, and gender to corresponding parameters.
        this.row = r;
        this.col = c;
        this.spotInPeopleTempInfo = spot;
        this.age = age;
        this.gender = gender;
    }
    //changes location of infected person.
    public void changeLocation(int[][] spotsTaken, boolean hospitalOpen, ArrayList<Virus> peopleInfected, ArrayList<Person> people, ArrayList<Person> peopleInfectedTempInfo, ListView<String> lstEvents) {
        //increases age by 1.
        age++;
        //timeout and check variables.
        int timeout = 0;
        boolean check = false;
        //increases inHospitalTime by 1 if infected person is in hospital.
        if (inHospital) {
            inHospitalTime++;
        }
        //loop running while check is false and while timeout is less than 1000.
        while (!check && timeout < 1000) {
            //temp row and column variables
            int tempRow = row;
            int tempCol = col;
            //if the hospital is open,
            if (hospitalOpen) {
                //if infected person is not in the hospital,
                if (!inHospital) {
                    //if infected person is directly outside the hospital, sets outsideHospital attribute to true,
                    if ((tempRow >= 9 && tempRow <= 20 && (tempCol == 29 || tempCol == 45)) || (tempCol >= 29 && tempCol <= 45) && (tempRow == 9 || tempRow == 20)) {
                        outsideHospital = true;
                    } else {
                        //moves the person towards the hospital using this slightly complex method which moves the people so that they don't get clustered all in one line while moving to hospital.
                        if (tempRow > 19) {
                            tempRow--;
                        } else if (tempRow < 10) {
                            tempRow++;
                        } else {
                            //method to ensure efficient movement.
                            if (tempCol < 29) {
                                if (spotsTaken[tempRow][tempCol + 1] == 1) {
                                    if (spotsTaken[tempRow - 1][tempCol] == 0) {
                                        tempRow = tempRow - 1;
                                    } else if (spotsTaken[tempRow + 1][tempCol] == 0) {
                                        tempRow = tempRow + 1;
                                    }
                                }
                            } else if (tempCol > 45) {
                                if (spotsTaken[tempRow][tempCol - 1] == 1) {
                                    if (spotsTaken[tempRow - 1][tempCol] == 0) {
                                        tempRow = tempRow - 1;
                                    } else if (spotsTaken[tempRow + 1][tempCol] == 0) {
                                        tempRow = tempRow + 1;
                                    }
                                }
                            }
                        }
                        if (tempCol > 44) {
                            tempCol--;
                        } else if (tempCol < 30) {
                            tempCol++;
                        } else {
                            //method to ensure efficient movement.
                            if (tempRow < 9) {
                                if (spotsTaken[tempRow + 1][tempCol] == 1) {
                                    if (spotsTaken[tempRow][tempCol - 1] == 0) {
                                        tempCol = tempCol - 1;
                                    } else if (spotsTaken[tempRow][tempCol + 1] == 0) {
                                        tempCol = tempCol + 1;
                                    }
                                }
                            } else if (tempRow > 20) {
                                if (spotsTaken[tempRow - 1][tempCol] == 1) {
                                    if (spotsTaken[tempRow][tempCol - 1] == 0) {
                                        tempCol = tempCol - 1;
                                    } else if (spotsTaken[tempRow][tempCol + 1] == 0) {
                                        tempCol = tempCol + 1;
                                    }
                                }
                            }


                        }

                    }
                    //if infected person is in the hospital,
                } else {
                    //various set of statements to control how long the person stays in hospital, and their chances of being cured or dying.
                    if (age < 30) {
                        //if person has been in hospital for 3 movement phases in the program (this number increases as the person's age increases, so the person stays in the hospital longer if they are older),
                        if (inHospitalTime > 3) {
                            //whether the infected person is cured or dies depends on their age.
                            if (Math.random() < .9) {
                                cured = true;
                            } else {
                                if (Math.random() < .02) {
                                    death = true;
                                }
                            }
                        }
                    } else if (age < 50) {
                        if (inHospitalTime > 5) {
                            if (Math.random() < .75) {
                                cured = true;
                            } else {
                                if (Math.random() < .1) {
                                    death = true;
                                }
                            }
                        }
                    } else if (age < 60) {
                        if (inHospitalTime > 8) {
                            if (Math.random() < .5) {
                                cured = true;
                            } else {
                                if (Math.random() < .4) {
                                    death = true;
                                }
                            }
                        }
                    } else {
                        if (inHospitalTime > 12) {
                            if (Math.random() < .3) {
                                cured = true;
                            } else {
                                if (Math.random() < .7) {
                                    death = true;
                                }
                            }
                        }
                    }
                }
                //if the hospital is closed,
            } else {
                //changes temp row and column to respective positions if infected person is next to hospital or vaccine distribution center.
                if (tempRow == 9 && tempCol >= 30 && tempCol <= 44) {
                    tempRow--;
                } else if (tempRow == 20 && tempCol >= 30 && tempCol <= 44) {
                    tempRow++;
                } else if (tempCol == 29 && tempRow >= 10 && tempRow <= 19) {
                    tempCol--;
                } else if (tempCol == 45 && tempRow >= 10 && tempRow <= 19) {
                    tempCol++;
                } else if (tempRow == 26 && tempCol >= 36 && tempCol <= 38) {
                    tempRow--;
                } else if (tempCol == 35 && tempRow >= 27 && tempRow <= 29) {
                    tempCol--;
                } else if (tempCol == 39 && tempRow >= 27 && tempRow <= 29) {
                    tempCol++;
                } else {
                    //changes temp row to respective position if infected person is on edge of grid.
                    if (tempRow == 29) {
                        tempRow--;
                    } else if (tempRow == 0) {
                        tempRow++;
                    } else {
                        //randomly increases or decreases infected person's row (slightly adjusted to bring infected person towards middle).
                        if (row < 15) {
                            if (Math.random() > .45) {
                                tempRow++;
                            } else {
                                tempRow--;
                            }
                        } else {
                            if (Math.random() > .55) {
                                tempRow++;
                            } else {
                                tempRow--;
                            }
                        }
                    }
                    //changes temp column to respective position if infected person is on edge of grid.
                    if (tempCol == 74) {
                        tempCol--;
                    } else if (tempCol == 0) {
                        tempCol++;
                    } else {
                        //randomly increases or decreases infected person's column (slightly adjusted to bring infected person towards middle).
                        if (col < 32) {
                            if (Math.random() > .45) {
                                tempCol++;
                            } else {
                                tempCol--;
                            }
                        } else {
                            if (Math.random() > .55) {
                                tempCol++;
                            } else {
                                tempCol--;
                            }
                        }
                    }
                }
            }
            //if the spot at tempRow and tempCol has no one in it,
            if (spotsTaken[tempRow][tempCol] == 0) {
                //sets check to true to stop loop.
                check = true;
                //sets spot in spots taken to 1 since the infected person is there now.
                spotsTaken[tempRow][tempCol] = 1;
                //sets old position to 0 in spots taken since no one is there now.
                spotsTaken[row][col] = 0;
                //updates row and column to match tempRow and tempCol.
                row = tempRow;
                col = tempCol;
                //else, if the hospital is open and the infected person is outside the hospital, waiting to get in,
            } else if (hospitalOpen && outsideHospital) {
                //sets check to true to stop loop.
                check = true;
                //runs through all hospital spots.
                for (int i = 10; i < 20; i++) {
                    for (int j = 30; j < 45; j++) {
                        //if a spot in the hospital is empty,
                        if (spotsTaken[i][j] == 2) {
                            //sets tempRow and tempCol to that spot.
                            tempRow = i;
                            tempCol = j;
                            //sets the spot in spots taken array to 3, since that spot is now taken in the hospital.
                            spotsTaken[tempRow][tempCol] = 3;
                            //sets old position to 0 in spots taken since no one is there now.
                            spotsTaken[row][col] = 0;
                            //updates row and column to match tempRow and tempCol.
                            row = tempRow;
                            col = tempCol;
                            //sets inHospital to true and outsideHospital to false.
                            inHospital = true;
                            outsideHospital = false;
                            //sets i to 20 and j to 45 to terminate the loop.
                            i = 20;
                            j = 45;
                        }
                    }
                }
                //else, if infected person is in the hospital, but has died,
            } else if (inHospital && death) {
                //sets check to true to stop loop.
                check = true;
                //sets the spot in spots taken array to 2, since that spot is now available in the hospital.
                spotsTaken[tempRow][tempCol] = 2;
                //removes infected person from peopleInfected arraylist, since it is now dead.
                peopleInfected.remove(this);
                //adds death from virus event to listview.
                lstEvents.getItems().add(0, "A person has died (virus).");
                //else, if the infected person is in the hospital, but has been cured,
            } else if (inHospital && cured) {
                //sets check to true to stop loop.
                check = true;
                //sets the spot in spots taken array to 2, since that spot is now available in the hospital.
                spotsTaken[tempRow][tempCol] = 2;
                //adds person from corresponding spot back in peopleInfectedTempInfo back to people array, since they are no longer infected.
                people.add(peopleInfectedTempInfo.get(spotInPeopleTempInfo));
                //removes person from peopleInfected arraylist, since they are no longer infected.
                peopleInfected.remove(this);
                //sets age of person added to people arraylist to its updated age.
                people.get(people.size() - 1).setAge(age);
                //adds cured event to listview.
                lstEvents.getItems().add(0, "A person has been cured.");
                //searches for a spot based on the region the person is in in the hospital (if in top left of hospital, searches for empty spot in top left of grid, etc.).
                if (row <= 15 && col <= 37) {
                    //as an example, if the person is in the top left of the hospital, it will search through top left of grid for empty spots with this double loop.
                    for (int i = 15; i > -1; i--) {
                        for (int j = 37; j > -1; j--) {
                            //if no one is in the spot,
                            if (spotsTaken[i][j] == 0) {
                                //sets tempRow to i and tempCol to j, as that is the new spot.
                                tempRow = i;
                                tempCol = j;
                            }
                        }
                    }
                } else if (row >= 15 && col <= 37) {
                    for (int i = 15; i < 30; i++) {
                        for (int j = 37; j > -1; j--) {
                            if (spotsTaken[i][j] == 0) {
                                tempRow = i;
                                tempCol = j;
                            }
                        }
                    }
                } else if (row <= 15) {
                    for (int i = 15; i > -1; i--) {
                        for (int j = 37; j < 75; j++) {
                            if (spotsTaken[i][j] == 0) {
                                tempRow = i;
                                tempCol = j;
                            }
                        }
                    }
                } else {
                    for (int i = 15; i < 30; i++) {
                        for (int j = 37; j < 75; j++) {
                            if (spotsTaken[i][j] == 0) {
                                tempRow = i;
                                tempCol = j;
                            }
                        }
                    }
                }
                //sets new row and column in new person in people array list (person who has just been cured) to tempRow and tempCol.
                people.get(people.size() - 1).setRow(tempRow);
                people.get(people.size() - 1).setCol(tempCol);
            }
            //increases timeout by 1 (used to prevent infinite looping and freezing of program).
            timeout++;
        }
        //sets inHospital to the boolean based on the certain conditions to update whether the infected person is in the hospital or not.
        inHospital = (row >= 10 && row <= 19 && col >= 30 && col <= 44);
    }
    //checks neighbors of person.
    public ArrayList<Integer> checkNeighbor(ArrayList<Person> tempPeople) {
        //arraylist for neighbors.
        ArrayList<Integer> neighbors = new ArrayList<>();
        //runs through all people in tempPeople.
        for (int i = 0; i < tempPeople.size(); i++) {
            //if person in tempPeople is next to person,
            if (tempPeople.get(i).getRow() >= row - 1 && tempPeople.get(i).getRow() <= row + 1 && tempPeople.get(i).getCol() >= col - 1 && tempPeople.get(i).getCol() <= col + 1) {
                //adds the person in tempPeople to neighbors arraylist.
                neighbors.add(i);
            }
        }
        //returns neighbors arraylist.
        return neighbors;
    }
    //various accessors and mutators to change and access attributes of people in virus class.
    public int getRow() {
        return this.row;
    }

    public int getCol() {
        return this.col;
    }

    public boolean getInHospital() {
        return this.inHospital;
    }

    public String getGender() {
        return this.gender;
    }

    public int getAge() {
        return this.age;
    }
}



VACCINE:



package sample;

import javafx.scene.control.ListView;
import java.util.ArrayList;

public class Vaccine {
    //row and column variables of the vaccine distributor.
    private int row;
    private int col;
    //constructor to initialize and create a vaccine distributor.
    public Vaccine(int r, int c) {
        //sets row and column to r and c parameters.
        this.row = r;
        this.col = c;
    }
    //changes location of vaccine distributor.
    public void changeLocation(int[][] spotsTaken, ArrayList<Person> people, ListView<String> lstEvents) {
        //timeout and check variables.
        boolean check = false;
        int timeout = 0;
        //loop running while check is false and while timeout is less than 1000.
        while (!check && timeout < 1000) {
            //temp row and column variables
            int tempRow = row;
            int tempCol = col;
            //neighbors arraylist set to the check neighbor function for all the people.
            ArrayList<Integer> neighbors = checkNeighbor(people);
            //loop running through neighbors arraylist.
            for (int a = 0; a < neighbors.size(); a++) {
                //sets the person's vaccinated attribute to true, since the vaccine distributor is close to it.
                people.get(checkNeighbor(people).get(a)).setVaccinated(true);
                //adds vaccinated event to listview.
                lstEvents.getItems().add(0, "A person has been vaccinated.");
            }
            //changes temp row and column to respective positions if vaccine distributor is next to hospital or vaccine distribution center.
            if (tempRow == 9 && tempCol >= 30 && tempCol <= 44) {
                tempRow--;
            } else if (tempRow == 20 && tempCol >= 30 && tempCol <= 44) {
                tempRow++;
            } else if (tempCol == 29 && tempRow >= 10 && tempRow <= 19) {
                tempCol--;
            } else if (tempCol == 45 && tempRow >= 10 && tempRow <= 19) {
                tempCol++;
            } else if (tempRow == 26 && tempCol >= 36 && tempCol <= 38) {
                tempRow--;
            } else if (tempCol == 35 && tempRow >= 27 && tempRow <= 29) {
                tempCol--;
            } else if (tempCol == 39 && tempRow >= 27 && tempRow <= 29) {
                tempCol++;
            } else {
                //changes temp row to respective position if vaccine distributor is on edge of grid.
                if (tempRow == 29) {
                    tempRow--;
                } else if (tempRow == 0) {
                    tempRow++;
                } else {
                    //randomly increases or decreases vaccine distributor's row (slightly adjusted to bring vaccine distributor towards middle).
                    if (row < 15) {
                        if (Math.random() > .45) {
                            tempRow++;
                        } else {
                            tempRow--;
                        }
                    } else {
                        if (Math.random() > .55) {
                            tempRow++;
                        } else {
                            tempRow--;
                        }
                    }
                }
                //changes temp column to respective position if vaccine distributor is on edge of grid.
                if (tempCol == 74) {
                    tempCol--;
                } else if (tempCol == 0) {
                    tempCol++;
                } else {
                    //randomly increases or decreases vaccine distributor's column (slightly adjusted to bring vaccine distributor towards middle).
                    if (col < 32) {
                        if (Math.random() > .45) {
                            tempCol++;
                        } else {
                            tempCol--;
                        }
                    } else {
                        if (Math.random() > .55) {
                            tempCol++;
                        } else {
                            tempCol--;
                        }
                    }

                }
            }
            //if the vaccine distributor is still in the vaccine distribution center,
            if (row >= 27 && row <= 29 && col >= 36 && col <= 38) {
                //sets check to true to stop loop.
                check = true;
                //sets spot in spots taken to 5 since the vaccine distributor is there now.
                spotsTaken[tempRow][tempCol] = 5;
                //sets old spot in spots taken to 4 since the vaccine distributor is not there anymore, but the vaccine distribution center is..
                spotsTaken[row][col] = 4;
                //updates row and column to match tempRow and tempCol.
                row = tempRow;
                col = tempCol;
            //else, if the vaccine distributor is not in the vaccine distribution center, and the spot selected is open,
            } else if (spotsTaken[tempRow][tempCol] == 0) {
                //sets check to true to stop loop.
                check = true;
                //sets spot in spots taken to 5 since the vaccine distributor is there now.
                spotsTaken[tempRow][tempCol] = 5;
                //sets old position to 0 in spots taken since no one is there now.
                spotsTaken[row][col] = 0;
                //updates row and column to match tempRow and tempCol.
                row = tempRow;
                col = tempCol;
            }
            //increases timeout by 1 (used to prevent infinite looping and freezing of program).
            timeout++;
        }
    }
    //checks neighbors of vaccine distributor.
    public ArrayList<Integer> checkNeighbor(ArrayList<Person> tempPeople) {
        //arraylist for neighbors.
        ArrayList<Integer> neighbors = new ArrayList<>();
        //runs through all people in tempPeople.
        for (int i = 0; i < tempPeople.size(); i++) {
            //if person in tempPeople is close to vaccine distributor,
            if ((tempPeople.get(i).getRow() >= row - 2) && (tempPeople.get(i).getRow() <= row + 2) && (tempPeople.get(i).getCol() >= col - 2) && (tempPeople.get(i).getCol() <= col + 2)) {
                //adds the person in tempPeople to neighbors arraylist.
                neighbors.add(i);
            }
        }
        //returns neighbors arraylist.
        return neighbors;
    }
}